# exp 9
a. Create a simple Spring application that demonstrates Dependency Injection (DI) using Javabased configuration instead of XML. Define a Student class that depends on a Course class. Use
Springâ€™s @Configuration and @Bean annotations to inject dependencies
1.Spring Application with Dependency Injection (DI)
<dependencies>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>5.3.9</version>
    </dependency>
</dependencies>
2.Course Class
public class Course {
    private String courseName;

    public Course(String courseName) {
        this.courseName = courseName;
    }

    public String getCourseName() {
        return courseName;
    }

    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }
}
3. Student Class

java
Copy
public class Student {
    private String name;
    private Course course;

    public Student(String name, Course course) {
        this.name = name;
        this.course = course;
    }

    public String getName() {
        return name;
    }

    public Course getCourse() {
        return course;
    }

    @Override
    public String toString() {
        return "Student{name='" + name + "', course=" + course.getCourseName() + "}";
    }
}
4. Java Configuration Class

java
Copy
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {

    @Bean
    public Course course() {
        return new Course("Java Programming");
    }

    @Bean
    public Student student() {
        return new Student("John Doe", course());
    }
}
5. Main Class

java
Copy
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        
        Student student = context.getBean(Student.class);
        System.out.println(student);
        
        context.close();
    }
}
B: Hibernate-based CRUD Operations for Student Entity
1. Dependencies (Maven POM)

xml
Copy
<dependencies>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.4.32.Final</version>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.26</version>
    </dependency>
</dependencies>
2. Student Entity Class

java
Copy
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Student {

    @Id
    private int id;
    private String name;

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
3. Hibernate Configuration (hibernate.cfg.xml)

xml
Copy
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</property>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/your_db</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">password</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="hibernate.show_sql">true</property>
    </session-factory>
</hibernate-configuration>
4. StudentDAO Class for CRUD Operations

java
Copy
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class StudentDAO {

    private static SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Student.class).buildSessionFactory();

    public void saveStudent(Student student) {
        Session session = factory.getCurrentSession();
        session.beginTransaction();
        session.save(student);
        session.getTransaction().commit();
    }

    public Student getStudent(int id) {
        Session session = factory.getCurrentSession();
        session.beginTransaction();
        Student student = session.get(Student.class, id);
        session.getTransaction().commit();
        return student;
    }

    public void updateStudent(Student student) {
        Session session = factory.getCurrentSession();
        session.beginTransaction();
        session.update(student);
        session.getTransaction().commit();
    }

    public void deleteStudent(int id) {
        Session session = factory.getCurrentSession();
        session.beginTransaction();
        Student student = session.get(Student.class, id);
        if (student != null) {
            session.delete(student);
        }
        session.getTransaction().commit();
    }

    public static void closeFactory() {
        factory.close();
    }
}
5. Main Class to Test CRUD Operations

java
Copy
public class MainApp {
    public static void main(String[] args) {
        StudentDAO studentDAO = new StudentDAO();

        // Create Student
        Student student = new Student();
        student.setId(1);
        student.setName("John Doe");

        studentDAO.saveStudent(student);

        // Read Student
        Student retrievedStudent = studentDAO.getStudent(1);
        System.out.println("Retrieved Student: " + retrievedStudent.getName());

        // Update Student
        retrievedStudent.setName("Jane Doe");
        studentDAO.updateStudent(retrievedStudent);

        // Delete Student
        studentDAO.deleteStudent(1);

        StudentDAO.closeFactory();
    }
}
 C: Spring with Hibernate for Transaction Management (Banking System)
1. Maven POM (dependencies)
xml
Copy
<dependencies>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>5.3.9</version>
    </dependency>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.4.32.Final</version>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.26</version>
    </dependency>
</dependencies>
2. BankAccount Entity
java
Copy
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class BankAccount {

    @Id
    private int accountId;
    private String accountHolder;
    private double balance;

    // Getters and Setters
    public int getAccountId() {
        return accountId;
    }

    public void setAccountId(int accountId) {
        this.accountId = accountId;
    }

    public String getAccountHolder() {
        return accountHolder;
    }

    public void setAccountHolder(String accountHolder) {
        this.accountHolder = accountHolder;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}
3. Banking Service (Transaction Management)
java
Copy
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BankingService {

    @Autowired
    private BankAccountDAO bankAccountDAO;

    @Transactional
    public void transferMoney(int fromAccountId, int toAccountId, double amount) {
        BankAccount fromAccount = bankAccountDAO.getAccount(fromAccountId);
        BankAccount toAccount = bankAccountDAO.getAccount(toAccountId);

        if (fromAccount != null && toAccount != null) {
            fromAccount.setBalance(fromAccount.getBalance() - amount);
            toAccount.setBalance(toAccount.getBalance() + amount);

            bankAccountDAO.updateAccount(fromAccount);
            bankAccountDAO.updateAccount(toAccount);
        }
    }
}
4. BankAccountDAO
java
Copy
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class BankAccountDAO {

    private static SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(BankAccount.class).buildSessionFactory();

    public BankAccount getAccount(int accountId) {
        Session session = factory.getCurrentSession();
        session.beginTransaction();
        BankAccount account = session.get(BankAccount.class, accountId);
        session.getTransaction().commit();
        return account;
    }

    public void updateAccount(BankAccount account) {
        Session session = factory.getCurrentSession();
        session.beginTransaction();
        session.update(account);
        session.getTransaction().commit();
    }
}
5. Main Application to Test Banking System
java
Copy
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        
        BankingService bankingService = context.getBean(BankingService.class);
        
        bankingService.transferMoney(101, 102, 1000.0);

        context.close();
    }
}
